"""
Handlers
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging
import random

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.db_manager import DatabaseManager
from database.models import (
    User, Dispute, Arbiter, Evidence,
    DisputeCategory, DisputeStatus, ArbiterSpecialization, EvidenceType,
    category_text_ru, status_emoji
)
from config import config
from bot.keyboards import (
    get_main_menu,
    get_cancel_keyboard,
    get_dispute_categories,
    get_arbiter_specializations,
    get_dispute_actions,
    get_arbiter_list,
    get_decision_keyboard,
    get_confirm_keyboard,
    get_help_keyboard,
    get_back_button
)
from bot.states import (
    CreateDisputeStates,
    BecomeArbiterStates,
    AddEvidenceStates,
    MakeDecisionStates
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
router = Router()
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ main.py)
db: DatabaseManager = None


def set_db(database_manager: DatabaseManager):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î"""
    global db
    db = database_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
router = Router()
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ main.py)
db: DatabaseManager = None


def set_db(database_manager: DatabaseManager):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î"""
    global db
    db = database_manager


# ========================================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ========================================

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )
    await db.create_user(user)
    await db.update_user_activity(user.user_id)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ü–ª–∞—Ç—Ñ–æ—Ä–º—É</b> –Ω–∞ TON.\n\n"
        "üîπ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤ –∑–∞ 3-7 –¥–Ω–µ–π\n"
        "üîπ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –±–ª–æ–∫—á–µ–π–Ω\n"
        "üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    help_text = (
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π</b>\n\n"
        "<b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä'\n"
        "2. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ\n"
        "3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–ø–æ—Ä–∞ ($10-$10,000)\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "5. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤–Ω–æ—Å—è—Ç –¥–µ–ø–æ–∑–∏—Ç—ã (10%)\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—é—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (3 –¥–Ω—è)\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞—é—Ç –∞—Ä–±–∏—Ç—Ä–∞\n"
        "‚Ä¢ –ê—Ä–±–∏—Ç—Ä –≤—ã–Ω–æ—Å–∏—Ç —Ä–µ—à–µ–Ω–∏–µ (5 –¥–Ω–µ–π)\n"
        "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${config.MIN_DISPUTE_AMOUNT}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${config.MAX_DISPUTE_AMOUNT}\n"
        f"‚Ä¢ –ó–∞–ª–æ–≥: {config.DEPOSIT_PERCENTAGE}%\n"
        f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {config.ARBITER_FEE_PERCENTAGE}%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    )
    
    await message.answer(
        help_text,
        reply_markup=get_help_keyboard(),
        parse_mode="HTML"
    )


# ========================================
# –°–û–ó–î–ê–ù–ò–ï –°–ü–û–†–ê
# ========================================

@router.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä")
async def start_create_dispute(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞"""
    await state.set_state(CreateDisputeStates.waiting_for_description)
    
    await message.answer(
        "üìù <b>–®–∞–≥ 1/4: –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:\n"
        "‚Ä¢ –°—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞\n"
        "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n"
        "‚Ä¢ –í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
        "üí° –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º –ª–µ–≥—á–µ –∞—Ä–±–∏—Ç—Ä—É –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ.",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(CreateDisputeStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–æ—Ä–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    if len(message.text) < 50:
        await message.answer(
            "‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    
    await state.update_data(description=message.text)
    await state.set_state(CreateDisputeStates.waiting_for_amount)
    
    await message.answer(
        "üí∞ <b>–®–∞–≥ 2/4: –°—É–º–º–∞ —Å–ø–æ—Ä–∞</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ USD (–æ—Ç ${config.MIN_DISPUTE_AMOUNT} –¥–æ ${config.MAX_DISPUTE_AMOUNT}):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>150</code>",
        parse_mode="HTML"
    )


@router.message(CreateDisputeStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–ø–æ—Ä–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    try:
        amount = float(message.text.replace(",", ".").replace("$", ""))
        
        is_valid, error_msg = config.validate_amount(amount)
        if not is_valid:
            await message.answer(f"‚ùó {error_msg}")
            return
        
        await state.update_data(amount=amount)
        await state.set_state(CreateDisputeStates.waiting_for_category)
        
        deposit = config.calculate_deposit(amount)
        fee = config.calculate_arbiter_fee(amount)
        
        await message.answer(
            "üìÇ <b>–®–∞–≥ 3/4: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ø–æ—Ä–∞</b>\n\n"
            f"üí∞ –°—É–º–º–∞ —Å–ø–æ—Ä–∞: <b>${amount:.2f}</b>\n"
            f"üí≥ –í–∞—à –∑–∞–ª–æ–≥: <b>${deposit:.2f}</b> ({config.DEPOSIT_PERCENTAGE}%)\n"
            f"‚öñÔ∏è –ö–æ–º–∏—Å—Å–∏—è –∞—Ä–±–∏—Ç—Ä—É: <b>${fee:.2f}</b> ({config.ARBITER_FEE_PERCENTAGE}%)\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä–∞:",
            reply_markup=get_dispute_categories(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>150</code>",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("category:"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_value = callback.data.split(":")[1]
    category = DisputeCategory(category_value)
    
    await state.update_data(category=category)
    await state.set_state(CreateDisputeStates.waiting_for_respondent)
    
    await callback.message.edit_text(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_text_ru(category)}</b>",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "üë§ <b>–®–∞–≥ 4/4: –í—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ username –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ Telegram:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>@username</code>\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Å–æ–≥–ª–∞—Å–µ–Ω —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!",
        parse_mode="HTML"
    )
    
    await callback.answer()


@router.message(CreateDisputeStates.waiting_for_respondent)
async def process_respondent(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return
    
    username = message.text.strip()
    if not username.startswith("@") or len(username) < 5:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: <code>@username</code>",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞—ë–º —Å–ø–æ—Ä –≤ –ë–î
    dispute = Dispute(
        initiator_id=message.from_user.id,
        amount=data['amount'],
        description=data['description'],
        category=data['category'],
        respondent_username=username
    )
    
    dispute_id = await db.create_dispute(dispute)
    
    await state.clear()
    
    deposit = config.calculate_deposit(data['amount'])
    
    success_text = (
        "‚úÖ <b>–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        f"üÜî –ù–æ–º–µ—Ä –¥–µ–ª–∞: <code>#{dispute_id}</code>\n"
        f"üí∞ –°—É–º–º–∞: ${data['amount']:.2f}\n"
        f"üí≥ –í–∞—à –∑–∞–ª–æ–≥: ${deposit:.2f}\n"
        f"üë§ –û—Ç–≤–µ—Ç—á–∏–∫: {username}\n\n"
        "üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—á–∏–∫—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n"
        f"<code>https://t.me/{(await message.bot.get_me()).username}?start=dispute_{dispute_id}</code>\n\n"
        "‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –≤–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç—ã."
    )
    
    await message.answer(
        success_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ø–æ—Ä #{dispute_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")


# ========================================
# –ú–û–ò –°–ü–û–†–´
# ========================================

@router.message(F.text == "üìã –ú–æ–∏ —Å–ø–æ—Ä—ã")
async def show_my_disputes(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await db.update_user_activity(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ä—ã
    disputes_initiator = await db.get_user_disputes(user_id, as_initiator=True, limit=5)
    disputes_respondent = await db.get_user_disputes(user_id, as_initiator=False, limit=5)
    
    if not disputes_initiator and not disputes_respondent:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–æ—Ä–æ–≤.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_main_menu()
        )
        return
    
    text = "üìã <b>–í–∞—à–∏ —Å–ø–æ—Ä—ã:</b>\n\n"
    
    if disputes_initiator:
        text += "<b>–í—ã ‚Äî –∏—Å—Ç–µ—Ü:</b>\n"
        for dispute in disputes_initiator[:3]:
            emoji = status_emoji(DisputeStatus(dispute['status']))
            text += (
                f"\n{emoji} –î–µ–ª–æ <code>#{dispute['dispute_id']}</code>\n"
                f"üí∞ ${dispute['amount']:.2f}\n"
                f"üìÖ {dispute['created_at'].strftime('%d.%m.%Y')}\n"
            )
    
    if disputes_respondent:
        text += "\n<b>–í—ã ‚Äî –æ—Ç–≤–µ—Ç—á–∏–∫:</b>\n"
        for dispute in disputes_respondent[:3]:
            emoji = status_emoji(DisputeStatus(dispute['status']))
            text += (
                f"\n{emoji} –î–µ–ª–æ <code>#{dispute['dispute_id']}</code>\n"
                f"üí∞ ${dispute['amount']:.2f}\n"
                f"üìÖ {dispute['created_at'].strftime('%d.%m.%Y')}\n"
            )
    
    text += "\nüí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ: <code>/dispute ID</code>"
    
    await message.answer(text, parse_mode="HTML")


# ========================================
# –ü–†–û–§–ò–õ–¨
# ========================================

@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        return
    
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å: {user['full_name']}</b>\n\n"
        f"üÜî ID: <code>{user['user_id']}</code>\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at'].strftime('%d.%m.%Y')}\n"
        f"‚öñÔ∏è –£—á–∞—Å—Ç–∏–µ –≤ —Å–ø–æ—Ä–∞—Ö: {user['disputes_participated']}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user['rating']:.1f}/5.0\n"
    )
    
    if user['is_arbiter']:
        arbiter = await db.get_arbiter(user['user_id'])
        if arbiter:
            profile_text += (
                f"\n<b>üìä –°—Ç–∞—Ç—É—Å –∞—Ä–±–∏—Ç—Ä–∞:</b>\n"
                f"–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –¥–µ–ª: {arbiter['cases_resolved']}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {arbiter['rating']:.1f}/5.0\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${arbiter['total_earned']:.2f}\n"
            )
    
    if user['wallet_address']:
        wallet_short = f"{user['wallet_address'][:8]}...{user['wallet_address'][-6:]}"
        profile_text += f"\nüíº –ö–æ—à–µ–ª—ë–∫: <code>{wallet_short}</code>"
    else:
        profile_text += "\nüíº –ö–æ—à–µ–ª—ë–∫: <i>–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</i>"
    
    await message.answer(profile_text, parse_mode="HTML")


# ========================================
# –°–¢–ê–¢–¨ –ê–†–ë–ò–¢–†–û–ú
# ========================================

@router.message(F.text == "‚öñÔ∏è –°—Ç–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–æ–º")
async def start_become_arbiter(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä–±–∏—Ç—Ä–æ–º"""
    user = await db.get_user(message.from_user.id)
    
    if user and user['is_arbiter']:
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞—Ä–±–∏—Ç—Ä!",
            reply_markup=get_main_menu()
        )
        return
    
    await state.set_state(BecomeArbiterStates.waiting_for_specialization)
    
    await message.answer(
        "‚öñÔ∏è <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä–±–∏—Ç—Ä–∞</b>\n\n"
        f"–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ª–æ–≥: <b>${config.MIN_ARBITER_DEPOSIT}</b>\n\n"
        "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥ {config.ARBITER_FEE_PERCENTAGE}% –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä–∞\n"
        "‚Ä¢ –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –ü–æ–º–æ—â—å –ª—é–¥—è–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
        reply_markup=get_arbiter_specializations(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("spec:"))
async def process_specialization(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    spec_value = callback.data.split(":")[1]
    
    spec_names = {
        "goods_electronics": "–¢–æ–≤–∞—Ä—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        "freelance_it": "–§—Ä–∏–ª–∞–Ω—Å –∏ IT",
        "real_estate": "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –∞—Ä–µ–Ω–¥–∞",
        "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
        "general": "–û–±—â–∏–µ —Å–ø–æ—Ä—ã"
    }
    
    await state.update_data(specialization=spec_value)
    
    await callback.message.edit_text(
        f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>{spec_names[spec_value]}</b>",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "üíº <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
        f"–î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞–ª–æ–≥–∞ (${config.MIN_ARBITER_DEPOSIT}) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å TON –∫–æ—à–µ–ª—ë–∫.\n\n"
        "‚ö†Ô∏è <i>–§—É–Ω–∫—Ü–∏—è TON Connect –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä–±–∏—Ç—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    await state.clear()
    await callback.answer()


# ========================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ========================================

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    stats = await db.get_platform_stats()
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
        f"üìã –í—Å–µ–≥–æ —Å–ø–æ—Ä–æ–≤: <b>{stats['total_disputes']}</b>\n"
        f"‚öñÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–æ–≤: <b>{stats['total_arbiters']}</b>\n"
        f"‚úÖ –†–µ—à—ë–Ω–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤: <b>{stats['resolved_disputes']}</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Å–ø–æ—Ä–æ–≤: <b>${stats['total_amount']:.2f}</b>\n"
    )
    
    await message.answer(stats_text, parse_mode="HTML")


# ========================================
# –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ó–ê–ü–†–û–°–û–í
# ========================================

@router.callback_query(F.data.startswith("help:"))
async def process_help_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏"""
    topic = callback.data.split(":")[1]
    
    help_texts = {
        "create_dispute": (
            "üìñ <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä</b>\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä'\n"
            "2. –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)\n"
            "3. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–ø–æ—Ä–∞ –≤ USD\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "5. –£–∫–∞–∂–∏—Ç–µ @username –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—á–∏–∫—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–æ—Ä."
        ),
        "become_arbiter": (
            "‚öñÔ∏è <b>–ö–∞–∫ —Å—Ç–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–æ–º</b>\n\n"
            f"1. –í–Ω–µ—Å–∏—Ç–µ –∑–∞–ª–æ–≥ ${config.MIN_ARBITER_DEPOSIT}\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–µ–ª–∞—Ö\n"
            f"4. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ {config.ARBITER_FEE_PERCENTAGE}% —Å –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä–∞\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –û–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª—è—Ö\n"
            "‚Ä¢ –í—Ä–µ–º—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–µ–ª"
        ),
        "fees": (
            "üí∞ <b>–¢–∞—Ä–∏—Ñ—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏</b>\n\n"
            f"–ó–∞–ª–æ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {config.DEPOSIT_PERCENTAGE}% –æ—Ç —Å—É–º–º—ã\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –∞—Ä–±–∏—Ç—Ä—É: {config.ARBITER_FEE_PERCENTAGE}% –æ—Ç —Å—É–º–º—ã\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${config.MIN_DISPUTE_AMOUNT}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${config.MAX_DISPUTE_AMOUNT}\n\n"
            "–ö–æ–º–∏—Å—Å–∏—è TON —Å–µ—Ç–∏: ~$0.01-0.05"
        ),
        "security": (
            "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>\n\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö TON\n"
            "‚Ä¢ –†–µ—à–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω\n"
            "‚Ä¢ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Ö–µ—à–∏—Ä—É—é—Ç—Å—è (SHA256)\n"
            "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è\n"
            "‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã"
        ),
        "faq": (
            "‚ùì <b>FAQ</b>\n\n"
            "<b>–í:</b> –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ?\n"
            "<b>–û:</b> –í —Å—Ä–µ–¥–Ω–µ–º 3-5 –¥–Ω–µ–π\n\n"
            "<b>–í:</b> –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–ø–æ—Ä?\n"
            "<b>–û:</b> –î–∞, –¥–æ –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n\n"
            "<b>–í:</b> –ß—Ç–æ –µ—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —Ä–µ—à–µ–Ω–∏–µ–º?\n"
            "<b>–û:</b> –ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
        ),
        "support": (
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n"
            "‚Ä¢ Email: support@example.com\n"
            "‚Ä¢ Telegram: @support_bot\n\n"
            "–ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )
    }
    
    text = help_texts.get(topic, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_button("help"),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "help")
async def back_to_help(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    await cmd_help(callback.message)
    await callback.answer()


@router.callback_query(F.data == "back_to_disputes")
async def back_to_disputes(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ—Ä–æ–≤"""
    await show_my_disputes(callback.message)
    await callback.answer()


# ========================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î
# ========================================

@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help",
        reply_markup=get_main_menu()
    )
