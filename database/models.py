"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–û–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
"""

from datetime import datetime
from enum import Enum
from typing import Optional
from dataclasses import dataclass, field


# === ENUMS (–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è) ===

class DisputeStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–ø–æ—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö"""
    CREATED = "created"                      # –°–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    AWAITING_INVITE = "awaiting_invite"      # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—á–∏–∫—É
    INVITE_ACCEPTED = "invite_accepted"      # –û—Ç–≤–µ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è–ª
    AWAITING_DEPOSITS = "awaiting_deposits"  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ—Ç –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    DEPOSITS_PAID = "deposits_paid"          # –î–µ–ø–æ–∑–∏—Ç—ã –≤–Ω–µ—Å–µ–Ω—ã
    CHOOSING_ARBITER = "choosing_arbiter"    # –í—ã–±–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞
    ARBITER_CHOSEN = "arbiter_chosen"        # –ê—Ä–±–∏—Ç—Ä –≤—ã–±—Ä–∞–Ω
    EVIDENCE_UPLOAD = "evidence_upload"      # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    UNDER_REVIEW = "under_review"            # –ê—Ä–±–∏—Ç—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–µ–ª–æ
    RESOLVED = "resolved"                    # –†–µ—à–µ–Ω–∏–µ –≤—ã–Ω–µ—Å–µ–Ω–æ
    APPEALED = "appealed"                    # –ü–æ–¥–∞–Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è
    APPEAL_REVIEW = "appeal_review"          # –ê–ø–µ–ª–ª—è—Ü–∏—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è
    APPEAL_RESOLVED = "appeal_resolved"      # –ê–ø–µ–ª–ª—è—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞
    REFUNDED = "refunded"                    # –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã (–æ—Ç–º–µ–Ω–∞)
    CANCELLED = "cancelled"                  # –û—Ç–º–µ–Ω—ë–Ω
    EXPIRED = "expired"                      # –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫


class DisputeCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä–æ–≤"""
    GOODS_SALE = "goods_sale"                # –ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤
    FREELANCE = "freelance"                  # –§—Ä–∏–ª–∞–Ω—Å –∏ —É—Å–ª—É–≥–∏
    RENTAL = "rental"                        # –ê—Ä–µ–Ω–¥–∞
    SERVICES = "services"                    # –£—Å–ª—É–≥–∏ –∏ —Ä–∞–±–æ—Ç—ã
    LOAN = "loan"                            # –î–æ–ª–≥
    SHARED_PURCHASE = "shared_purchase"      # –°–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
    OTHER = "other"                          # –î—Ä—É–≥–æ–µ


class ArbiterSpecialization(Enum):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ä–±–∏—Ç—Ä–æ–≤"""
    GOODS_ELECTRONICS = "goods_electronics"  # –¢–æ–≤–∞—Ä—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
    FREELANCE_IT = "freelance_it"            # –§—Ä–∏–ª–∞–Ω—Å –∏ IT
    REAL_ESTATE = "real_estate"              # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –∞—Ä–µ–Ω–¥–∞
    CREATIVE = "creative"                    # –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
    GENERAL = "general"                      # –û–±—â–∏–µ —Å–ø–æ—Ä—ã


class EvidenceType(Enum):
    """–¢–∏–ø—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    TEXT = "text"           # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    PHOTO = "photo"         # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
    DOCUMENT = "document"   # –î–æ–∫—É–º–µ–Ω—Ç (PDF, DOC, etc)
    LINK = "link"          # –°—Å—ã–ª–∫–∞


# === DATACLASSES (–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö) ===

@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int                           # Telegram ID
    username: Optional[str]                # Telegram username
    full_name: str                         # –ü–æ–ª–Ω–æ–µ –∏–º—è
    wallet_address: Optional[str] = None   # TON –∫–æ—à–µ–ª—ë–∫
    created_at: datetime = field(default_factory=datetime.utcnow)
    is_arbiter: bool = False               # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–±–∏—Ç—Ä–æ–º
    disputes_participated: int = 0         # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä–æ–≤
    rating: float = 3.0                    # –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)
    is_blocked: bool = False               # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏


@dataclass
class Dispute:
    """–ú–æ–¥–µ–ª—å —Å–ø–æ—Ä–∞"""
    initiator_id: int                      # ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–∏—Å—Ç—Ü–∞)
    amount: float                          # –°—É–º–º–∞ —Å–ø–æ—Ä–∞ (USD)
    description: str                       # –û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
    category: DisputeCategory              # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    dispute_id: Optional[int] = None       # ID –≤ –±–∞–∑–µ (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
    respondent_id: Optional[int] = None    # ID –æ—Ç–≤–µ—Ç—á–∏–∫–∞
    respondent_username: Optional[str] = None  # Username –æ—Ç–≤–µ—Ç—á–∏–∫–∞
    status: DisputeStatus = DisputeStatus.CREATED
    arbiter_id: Optional[int] = None       # ID –∞—Ä–±–∏—Ç—Ä–∞
    contract_address: Optional[str] = None # –ê–¥—Ä–µ—Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ TON
    created_at: datetime = field(default_factory=datetime.utcnow)
    updated_at: datetime = field(default_factory=datetime.utcnow)
    initiator_deposit_paid: bool = False   # –ò—Å—Ç–µ—Ü –≤–Ω—ë—Å –¥–µ–ø–æ–∑–∏—Ç
    respondent_deposit_paid: bool = False  # –û—Ç–≤–µ—Ç—á–∏–∫ –≤–Ω—ë—Å –¥–µ–ø–æ–∑–∏—Ç
    resolution: Optional[str] = None       # –†–µ—à–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞ (—Ç–µ–∫—Å—Ç)
    initiator_share: Optional[int] = None  # –î–æ–ª—è –∏—Å—Ç—Ü–∞ (0-100%)
    evidence_deadline: Optional[datetime] = None  # –î–µ–¥–ª–∞–π–Ω –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    decision_deadline: Optional[datetime] = None  # –î–µ–¥–ª–∞–π–Ω —Ä–µ—à–µ–Ω–∏—è


@dataclass
class Arbiter:
    """–ú–æ–¥–µ–ª—å –∞—Ä–±–∏—Ç—Ä–∞"""
    user_id: int                           # Telegram ID
    specialization: ArbiterSpecialization  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    deposit_amount: float                  # –†–∞–∑–º–µ—Ä –∑–∞–ª–æ–≥–∞ (USD)
    wallet_address: Optional[str] = None   # TON –∫–æ—à–µ–ª—ë–∫
    is_active: bool = True                 # –ê–∫—Ç–∏–≤–µ–Ω –ª–∏
    rating: float = 3.0                    # –†–µ–π—Ç–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞ (1-5)
    cases_resolved: int = 0                # –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –¥–µ–ª
    appeals_count: int = 0                 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø–µ–ª–ª—è—Ü–∏–π
    average_resolution_time: float = 0.0   # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (—á–∞—Å—ã)
    registered_at: datetime = field(default_factory=datetime.utcnow)
    total_earned: float = 0.0              # –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (USD)


@dataclass
class Evidence:
    """–ú–æ–¥–µ–ª—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    dispute_id: int                        # ID —Å–ø–æ—Ä–∞
    user_id: int                           # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª)
    description: str                       # –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    file_type: EvidenceType                # –¢–∏–ø (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç)
    evidence_id: Optional[int] = None      # ID –≤ –±–∞–∑–µ
    file_hash: Optional[str] = None        # SHA256 —Ö—ç—à —Ñ–∞–π–ª–∞
    file_path: Optional[str] = None        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_url: Optional[str] = None         # URL (–¥–ª—è —Å—Å—ã–ª–æ–∫)
    uploaded_at: datetime = field(default_factory=datetime.utcnow)


@dataclass
class Decision:
    """–ú–æ–¥–µ–ª—å —Ä–µ—à–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞"""
    dispute_id: int                        # ID —Å–ø–æ—Ä–∞
    arbiter_id: int                        # ID –∞—Ä–±–∏—Ç—Ä–∞
    initiator_share: int                   # –î–æ–ª—è –∏—Å—Ç—Ü–∞ (0-100%)
    reasoning: str                         # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
    decision_id: Optional[int] = None      # ID –≤ –±–∞–∑–µ
    created_at: datetime = field(default_factory=datetime.utcnow)
    is_appealed: bool = False              # –ü–æ–¥–∞–Ω–∞ –ª–∏ –∞–ø–µ–ª–ª—è—Ü–∏—è
    appeal_arbiter_ids: Optional[list[int]] = None  # IDs –∞—Ä–±–∏—Ç—Ä–æ–≤ –∞–ø–µ–ª–ª—è—Ü–∏–∏


@dataclass
class Transaction:
    """–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
    dispute_id: int                        # ID —Å–ø–æ—Ä–∞
    user_id: int                           # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tx_hash: str                           # –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON
    amount: float                          # –°—É–º–º–∞ (TON)
    tx_type: str                           # deposit, payout, refund
    transaction_id: Optional[int] = None   # ID –≤ –±–∞–∑–µ
    created_at: datetime = field(default_factory=datetime.utcnow)
    confirmed: bool = False                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏


@dataclass
class Review:
    """–ú–æ–¥–µ–ª—å –æ—Ç–∑—ã–≤–∞ –æ–± –∞—Ä–±–∏—Ç—Ä–µ"""
    arbiter_id: int                        # ID –∞—Ä–±–∏—Ç—Ä–∞
    reviewer_id: int                       # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ç–æ –æ—Å—Ç–∞–≤–∏–ª)
    dispute_id: int                        # ID —Å–ø–æ—Ä–∞
    rating: int                            # –û—Ü–µ–Ω–∫–∞ (1-5)
    comment: Optional[str] = None          # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    review_id: Optional[int] = None        # ID –≤ –±–∞–∑–µ
    created_at: datetime = field(default_factory=datetime.utcnow)


# === HELPER FUNCTIONS ===

def status_emoji(status: DisputeStatus) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Ä–∞"""
    emoji_map = {
        DisputeStatus.CREATED: "üÜï",
        DisputeStatus.AWAITING_INVITE: "üì®",
        DisputeStatus.INVITE_ACCEPTED: "‚úÖ",
        DisputeStatus.AWAITING_DEPOSITS: "üí≥",
        DisputeStatus.DEPOSITS_PAID: "üí∞",
        DisputeStatus.CHOOSING_ARBITER: "üë•",
        DisputeStatus.ARBITER_CHOSEN: "‚öñÔ∏è",
        DisputeStatus.EVIDENCE_UPLOAD: "üìé",
        DisputeStatus.UNDER_REVIEW: "üîç",
        DisputeStatus.RESOLVED: "‚úÖ",
        DisputeStatus.APPEALED: "üîÑ",
        DisputeStatus.APPEAL_REVIEW: "‚öñÔ∏è",
        DisputeStatus.APPEAL_RESOLVED: "‚úÖ",
        DisputeStatus.REFUNDED: "üí∏",
        DisputeStatus.CANCELLED: "‚ùå",
        DisputeStatus.EXPIRED: "‚è∞"
    }
    return emoji_map.get(status, "üìù")


def status_text_ru(status: DisputeStatus) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    text_map = {
        DisputeStatus.CREATED: "–°–æ–∑–¥–∞–Ω",
        DisputeStatus.AWAITING_INVITE: "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
        DisputeStatus.INVITE_ACCEPTED: "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ",
        DisputeStatus.AWAITING_DEPOSITS: "–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤",
        DisputeStatus.DEPOSITS_PAID: "–î–µ–ø–æ–∑–∏—Ç—ã –≤–Ω–µ—Å–µ–Ω—ã",
        DisputeStatus.CHOOSING_ARBITER: "–í—ã–±–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞",
        DisputeStatus.ARBITER_CHOSEN: "–ê—Ä–±–∏—Ç—Ä –≤—ã–±—Ä–∞–Ω",
        DisputeStatus.EVIDENCE_UPLOAD: "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
        DisputeStatus.UNDER_REVIEW: "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
        DisputeStatus.RESOLVED: "–†–µ—à—ë–Ω",
        DisputeStatus.APPEALED: "–ü–æ–¥–∞–Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è",
        DisputeStatus.APPEAL_REVIEW: "–ê–ø–µ–ª–ª—è—Ü–∏—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è",
        DisputeStatus.APPEAL_RESOLVED: "–ê–ø–µ–ª–ª—è—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞",
        DisputeStatus.REFUNDED: "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤",
        DisputeStatus.CANCELLED: "–û—Ç–º–µ–Ω—ë–Ω",
        DisputeStatus.EXPIRED: "–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫"
    }
    return text_map.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def category_text_ru(category: DisputeCategory) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    text_map = {
        DisputeCategory.GOODS_SALE: "–ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        DisputeCategory.FREELANCE: "–§—Ä–∏–ª–∞–Ω—Å –∏ —É—Å–ª—É–≥–∏",
        DisputeCategory.RENTAL: "–ê—Ä–µ–Ω–¥–∞",
        DisputeCategory.SERVICES: "–£—Å–ª—É–≥–∏ –∏ —Ä–∞–±–æ—Ç—ã",
        DisputeCategory.LOAN: "–î–æ–ª–≥",
        DisputeCategory.SHARED_PURCHASE: "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",
        DisputeCategory.OTHER: "–î—Ä—É–≥–æ–µ"
    }
    return text_map.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


def specialization_text_ru(spec: ArbiterSpecialization) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    text_map = {
        ArbiterSpecialization.GOODS_ELECTRONICS: "–¢–æ–≤–∞—Ä—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        ArbiterSpecialization.FREELANCE_IT: "–§—Ä–∏–ª–∞–Ω—Å –∏ IT",
        ArbiterSpecialization.REAL_ESTATE: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –∞—Ä–µ–Ω–¥–∞",
        ArbiterSpecialization.CREATIVE: "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
        ArbiterSpecialization.GENERAL: "–û–±—â–∏–µ —Å–ø–æ—Ä—ã"
    }
    return text_map.get(spec, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
